AWSTemplateFormatVersion: '2010-09-09'

# Hub stack creation prerequisite:  first create an EC2 key pair and a VPC stack.
# For details about how to connect to a Linux instance in a private subnet via the
# Hub, see the following AWS blog post:
# https://aws.amazon.com/blogs/security/securely-connect-to-linux-instances-running-in-a-private-amazon-vpc/

Description: Hub


Parameters:

  ExportPrefix:
    Description: Prefix for stack exports
    Type: String

  CloudFormationBucket:
    Description: Bucket for cloudformation templates
    Type: String

  InboundIP:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  KeyName:
    Description: EC2 key pair name for Hub host SSH access
    Type: AWS::EC2::KeyPair::KeyName

  ServerKeyName:
    Description: EC2 key pair name for Hub host SSH access
    Default: ServerKey
    Type: String

  LogRetentionInDays:
    Description: Number of days you would like your CloudWatch Logs to be retained
    Type: Number
    Default: 90

  # For more information on the google-authenticator PAM module, see: https://github.com/google/google-authenticator-libpam
  MFA:
    Description: Set to true to install MFA using the google-authenticator PAM module on your Hub host
    Type: String
    ConstraintDescription: Value must be true or false
    Default: false
    AllowedValues:
      - true
      - false

Mappings:

  # Amazon Linux AMI - https://aws.amazon.com/amazon-linux-ami/
  # Note: This has not been tested with Amazon Linux 2
  AMIMap:
    ap-northeast-1:
      AMI: ami-ceafcba8
    ap-northeast-2:
      AMI: ami-863090e8
    ap-south-1:
      AMI: ami-531a4c3c
    ap-southeast-1:
      AMI: ami-68097514
    ap-southeast-2:
      AMI: ami-942dd1f6
    eu-west-1:
      AMI: ami-d834aba1
    eu-west-2:
      AMI: ami-403e2524
    eu-west-3:
      AMI: ami-8ee056f3
    eu-central-1:
      AMI: ami-5652ce39
    sa-east-1:
      AMI: ami-84175ae8
    us-east-1:
      AMI: ami-97785bed
    us-east-2:
      AMI: ami-f63b1193
    us-west-1:
      AMI: ami-824c4ee2
    us-west-2:
      AMI: ami-f2d3638a
    ca-central-1:
      AMI: ami-a954d1cd

Resources:

  HubSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the Hub host
      VpcId:
        Fn::ImportValue: !Sub "${ExportPrefix}-VPCId"
      SecurityGroupIngress:
      - CidrIp: !Ref InboundIP
        IpProtocol: tcp
        ToPort: 22
        FromPort: 22
      - CidrIp: !Ref InboundIP
        IpProtocol: tcp
        ToPort: 80
        FromPort: 80
      - CidrIp: !Ref InboundIP
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 80
        FromPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        ToPort: 22
        FromPort: 22
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-HubSecurityGroup"

  HubRole:
    Type: AWS::IAM::Role
    DependsOn: HubSecureLogGroup
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: CloudWatchLogs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: !GetAtt HubSecureLogGroup.Arn
      - PolicyName: HubControl
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - cloudformation:*
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Sub "arn:aws:s3:::${CloudFormationBucket}"
              - !Sub "arn:aws:s3:::${CloudFormationBucket}/*"
          - Effect: Allow
            Action:
              - ec2:*
            Resource: '*'
          - Effect: Allow
            Action:
              - iam:ListInstanceProfiles
            Resource: '*'
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              Fn::ImportValue: !Sub "${ExportPrefix}-ServerRoles"

  HubInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref HubRole

  HubHost:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              awslogs: []
              google-authenticator: []

          files:
            "/etc/cfn/cfn-hup.conf":
              mode: "000444"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}

            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              mode: "000444"
              owner: root
              group: root
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.HubHost.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource HubHost --region ${AWS::Region}

            "/etc/awslogs/awslogs.conf":
              mode: "000444"
              owner: root
              group: root
              content: !Sub |
                [general]
                use_gzip_http_content_encoding = true
                state_file = /var/lib/awslogs/agent-state
                [/var/log/secure]
                file = /var/log/secure
                log_group_name = ${HubSecureLogGroup}
                log_stream_name = log
                datetime_format = %b %d %H:%M:%S

            "/etc/awslogs/awscli.conf":
              mode: "000444"
              owner: root
              group: root
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}

            "/etc/profile.d/init_google_authenticator.sh":
              owner: root
              group: root
              content: !Sub |
                #!/bin/bash -xe
                if [ "${MFA}" == "true" ] && [ ! -e ~/.google_authenticator ]  &&  [ $USER != "root" ]; then
                  echo -e "Initializing google-authenticator\n"
                  google-authenticator --time-based --disallow-reuse --force --rate-limit=3 --rate-time=30 --window-size=3
                  echo -e "Save the generated emergency scratch codes and use secret key or scan the QR code to register your device for multi-factor authentication.\n"
                  echo -e "Login again using your ssh key pair and the generated one-time password on your registered device.\n"
                  logout
                fi

            "/usr/local/sbin/configure_mfa.sh":
              mode: "000550"
              owner: root
              group: root
              content: !Sub |
                #!/bin/bash -xe
                if [ "${MFA}" == "true" ]; then
                  echo "auth       required     pam_google_authenticator.so nullok" >> /etc/pam.d/sshd
                  sed -e '/auth       substack     password-auth/ s/^#*/#/' -i /etc/pam.d/sshd
                  sed -e '/ChallengeResponseAuthentication no/ s/^#*/#/' -i /etc/ssh/sshd_config
                  sed -e '/#ChallengeResponseAuthentication yes/s/^#//' -i /etc/ssh/sshd_config
                  echo >> /etc/ssh/sshd_config
                  echo "AuthenticationMethods publickey,keyboard-interactive" >> /etc/ssh/sshd_config
                  service sshd restart
                fi
                rm -f /usr/local/sbin/configure_mfa.sh

          commands:
            configure-mfa:
              command: /usr/local/sbin/configure_mfa.sh

          services:
              sysvinit:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
                  files:
                    - /etc/cfn/cfn-hup.conf
                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                awslogs:
                  enabled: true
                  ensureRunning: true
                  files: /etc/awslogs/awslogs.conf

    Properties:
      InstanceType: t3.medium
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref HubNetworkInterface
          DeviceIndex: 0
      ImageId: !FindInMap [ AMIMap, !Ref "AWS::Region", AMI ]
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash -xe
            yum update -y
            /opt/aws/bin/cfn-init -v -s ${AWS::StackId} --resource HubHost --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource HubHost --region ${AWS::Region}
            yum -y install docker
            mkdir /server-key
            aws ec2 create-key-pair --key-name ${ServerKeyName} --query 'KeyMaterial' --output text > /server-key/${ServerKeyName}.pem
            service docker start
            docker run -e ServerKeyName=${ServerKeyName} -p 80:80 -v /server-key:/home/admin/.ssh tomcatling/jupyterhub_aws
          - { ServerKeyName: !Ref ServerKeyName }
      IamInstanceProfile: !Ref HubInstanceProfile
      Tags:
        - Key: Name
          Value: jupyterhub
    DependsOn: HubEipAssociation
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M

  HubEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  HubEipAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt HubEip.AllocationId
      NetworkInterfaceId: !Ref HubNetworkInterface
    DependsOn:
      - HubEip
      - HubNetworkInterface

  HubNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    DependsOn: HubSecurityGroup
    Properties:
      SubnetId:
        Fn::ImportValue: !Sub "${ExportPrefix}-SubnetAPublic"
      GroupSet:
        - !Ref HubSecurityGroup
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: startup-kit-Hub

  HubSecureLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogRetentionInDays

  HubSecureLogGroupStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref HubSecureLogGroup
      LogStreamName: log

  # When a user tries to SSH with invalid username the activity is logged in the SSH log file
  SshInvalidUserMetricFilter:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName: !Ref HubSecureLogGroup
        FilterPattern: "[Mon, day, timestamp, ip, id, status = Invalid, ...]"
        MetricTransformations:
        - MetricValue: 1
          MetricNamespace: SSH
          MetricName: sshInvalidUser

  SshInvalidhUserAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: SSH connections attempted with invalid username is greater than 3 over 1 minutes
        MetricName: sshInvalidUser
        Namespace: SSH
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        Threshold: 3
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching

  # When a user uses a bad private key pair or username
  SshClosedConnectionMetricFilter:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName: !Ref HubSecureLogGroup
        FilterPattern: "[Mon, day, timestamp, ip, id, msg1= Connection, msg2 = closed, ...]"
        MetricTransformations:
        - MetricValue: 1
          MetricNamespace: SSH
          MetricName: sshClosedConnection

  SshClosedConnectionAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: SSH connections closed due to invalid SSH key or username is greater than 5 in 5 minutes
        MetricName: sshClosedConnection
        Namespace: SSH
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: notBreaching

Outputs:
  HubEip:
    Description: EIP for Hub host
    Value: !Ref HubEip
    Export:
      Name: !Sub "${ExportPrefix}-HubEIP"

  HubEipAllocationId:
    Description: EIP allocation id for Hub host
    Value: !GetAtt HubEip.AllocationId
    Export:
      Name: !Sub "${ExportPrefix}-HubEIP-AllocationId"
  HubSecurityGroupId:
    Description: Id of the Hub security group
    Value: !Ref HubSecurityGroup
    Export:
      Name: !Sub "${ExportPrefix}-HubSecurityGroupId"