AWSTemplateFormatVersion: '2010-09-09'

Description: Example instances accessible via a Hub in a private subnet.

Parameters:

  ParentStack:
    Description: Name of parent stack.
    Type: String
    Default: jupyterhub
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  InstanceTypeParameter:
    Type: String
    Default: c5.xlarge
    # Pattern should allow these instance families up to 9xlarge
    AllowedPattern : "^(c5|m5|r5|c5d).[0-9]?.*$"

  User:
    Description: Name of parent stack.
    Default: TomCatling
    Type: String

  KeyName:
    Description: EC2 key pair name for service for SSH access.
    Type: AWS::EC2::KeyPair::KeyName

Mappings:

  # Amazon Linux AMI - https://aws.amazon.com/amazon-linux-ami/
  # Note: This has not been tested with Amazon Linux 2
  AMIMap:
    ap-northeast-1:
      AMI: ami-ceafcba8
    ap-northeast-2:
      AMI: ami-863090e8
    ap-south-1:
      AMI: ami-531a4c3c
    ap-southeast-1:
      AMI: ami-68097514
    ap-southeast-2:
      AMI: ami-942dd1f6
    eu-west-1:
      AMI: ami-d834aba1
    eu-west-2:
      AMI: ami-403e2524
    eu-west-3:
      AMI: ami-8ee056f3
    eu-central-1:
      AMI: ami-5652ce39
    sa-east-1:
      AMI: ami-84175ae8
    us-east-1:
      AMI: ami-97785bed
    us-east-2:
      AMI: ami-f63b1193
    us-west-1:
      AMI: ami-824c4ee2
    us-west-2:
      AMI: ami-f2d3638a
    ca-central-1:
      AMI: ami-a954d1cd

Resources:

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable ssh ingress from the Hub host only.
      VpcId: 
        Fn::ImportValue: !Sub "${ParentStack}-VPCId"
      SecurityGroupIngress:
      - SourceSecurityGroupId: 
          Fn::ImportValue: !Sub "${ParentStack}-HubSecurityGroupId"
        IpProtocol: tcp
        ToPort: 22
        FromPort: 22
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1

  Server:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceTypeParameter'
      IamInstanceProfile:
        Fn::ImportValue: !Sub "${ParentStack}-InstanceProfile-${User}"
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref ServerNetworkInterface
          DeviceIndex: 0
      ImageId: !FindInMap [ AMIMap, !Ref "AWS::Region", AMI ]
      Tags:
        - Key: Name
          Value: !Sub "server-${User}"
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/bin/bash -xe
            yum update -y
            yum -y install docker nfs-utils

            mount -t nfs4 -o nfsvers=4.1 ${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt
            chown ec2-user:ec2-user /mnt/

            service docker start
            docker run -p 80:80 -v /mnt:/home/jovyan jupyter/datascience-notebook
          - FileSystem: 
              Fn::ImportValue: !Sub "${ParentStack}-EFS-${User}"

  ServerNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    DependsOn: ServerSecurityGroup
    Properties:
      SubnetId: 
        Fn::ImportValue: !Sub "${ParentStack}-SubnetAPrivate"
      GroupSet:
        - !Ref ServerSecurityGroup
      SourceDestCheck: true
      Tags:
        - Key: Name
          Value: Server-example

Outputs:

  InstanceIp:
    Description: Private IP of the instance
    Value: !GetAtt Server.PrivateIp
