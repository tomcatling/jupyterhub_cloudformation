---
  AWSTemplateFormatVersion: "2010-09-09"
  Parameters:
    pToc16InfrastructureStackName:  
      Type: String
      Default: toc-16-infrastructure
    pBETInfrastructureStackName:  
      Type: String
      Default: bet-infrastructure
  Description: "User groupd and permissions, and resources created on a per-user basis."

  Resources: 
    SelfServeUsers: 
      Properties: 
        GroupName: "SelfServeUsers"
      Type: "AWS::IAM::Group"
    AccountAdministrators: 
      Properties: 
        GroupName: "AccountAdministrators"
        ManagedPolicyArns: 
          - "arn:aws:iam::aws:policy/AdministratorAccess"
      Type: "AWS::IAM::Group"

    SelfServeUsersPolicy: 
      Properties: 
        Groups: 
          - 
            Ref: "SelfServeUsers"
        PolicyDocument: 
          Statement: 
            - 
              Action: 
                - "iam:ListAccountAliases"
                - "iam:ListUsers"
                - "iam:GetAccountSummary"
                - "iam:ListUserPolicies"
                - "iam:ListGroupsForUser"
                - "iam:ListGroupPolicies"
                - "iam:ListAttachedGroupPolicies"
                - "iam:ListAttachedUserPolicies"
                - "iam:GetUser"
                - "iam:ListPolicies"
                - "iam:GenerateServiceLastAccessedDetails"
                - "iam:GetServiceLastAccessedDetails"
                - "iam:ListPoliciesGrantingServiceAccess"
                - "iam:ListEntitiesForPolicy"
              Effect: "Allow"
              Resource: "*"
              Sid: "AllowAllUsersToListAccounts"
            - 
              Action: 
                - "iam:GetAccessKeyLastUsed"
                - "iam:ChangePassword"
                - "iam:CreateAccessKey"
                - "iam:CreateLoginProfile"
                - "iam:DeleteAccessKey"
                - "iam:DeleteLoginProfile"
                - "iam:GetAccountPasswordPolicy"
                - "iam:GetLoginProfile"
                - "iam:ListAccessKeys"
                - "iam:UpdateAccessKey"
                - "iam:UpdateLoginProfile"
                - "iam:ListSigningCertificates"
                - "iam:DeleteSigningCertificate"
                - "iam:UpdateSigningCertificate"
                - "iam:UploadSigningCertificate"
                - "iam:ListSSHPublicKeys"
                - "iam:GetSSHPublicKey"
                - "iam:DeleteSSHPublicKey"
                - "iam:UpdateSSHPublicKey"
                - "iam:UploadSSHPublicKey"
              Effect: "Allow"
              Resource: 
                - !Join ["",["arn:aws:iam::", !Ref "AWS::AccountId",":user/${aws:username}"]]
              Sid: "AllowIndividualUserToSeeAndManageTheirOwnAccountInformation"
            - 
              Action: 
                - "iam:ListVirtualMFADevices"
                - "iam:ListMFADevices"
              Effect: "Allow"
              Resource: 
                - !Join ["",["arn:aws:iam::", !Ref "AWS::AccountId", ":mfa/*"]]
                - !Join ["",["arn:aws:iam::", !Ref "AWS::AccountId", ":user/${aws:username}"]]
              Sid: "AllowIndividualUserToListTheirOwnMFA"
            - 
              Action: 
                - "iam:CreateVirtualMFADevice"
                - "iam:DeleteVirtualMFADevice"
                - "iam:RequestSmsMfaRegistration"
                - "iam:FinalizeSmsMfaRegistration"
                - "iam:EnableMFADevice"
                - "iam:ResyncMFADevice"
              Effect: "Allow"
              Resource: 
                - !Join ["",["arn:aws:iam::", !Ref "AWS::AccountId", ":mfa/${aws:username}"]]
                - !Join ["",["arn:aws:iam::", !Ref "AWS::AccountId", ":user/${aws:username}"]]
              Sid: "AllowIndividualUserToManageTheirOwnMFA"
            - 
              Action: 
                - "iam:DeactivateMFADevice"
              Condition: 
                Bool: 
                  aws:MultiFactorAuthPresent: true
              Effect: "Allow"
              Resource: 
                - !Join ["",["arn:aws:iam::", !Ref "AWS::AccountId", ":mfa/${aws:username}"]]
                - !Join ["",["arn:aws:iam::", !Ref "AWS::AccountId", ":user/${aws:username}"]]
              Sid: "AllowUsersToDeactivateTheirOwnVirtualMFADevice"
          Version: "2012-10-17"
      Type: "AWS::IAM::ManagedPolicy"

### Tom Catling
############################################################

    TomCatling: 
      Properties: 
        Groups: 
          - Ref: "SelfServeUsers"
          - Ref: "AccountAdministrators"
        UserName: "tom.catling"
      Type: "AWS::IAM::User"

    TomCatlingRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /

    TomCatlingInstanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
        Path: /
        Roles:
          - !Ref TomCatlingRole

    TomCatlingPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties: 
        Description: String
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 's3:*'
                - 'codecommit:*'
                - 'ecr:*'
                - 'ec2:*'
              Resource: '*'
            - Effect: Allow
              Action:
              - 'cloudformation:DeleteStack'
              Resource: '*'
        Roles:
          - !Ref TomCatlingRole
        Users:
          - !Ref TomCatling
        ManagedPolicyName: TomCatlingPolicy
    
    TomCatlingEFS:
      Type: AWS::EFS::FileSystem
      Properties:
        PerformanceMode: generalPurpose

############################################################

  Outputs:
  
    TomCatlingEFSOutput:
      Description: EFS ID for user tom.catling
      Value: !Ref TomCatlingEFS
      Export:
        Name: !Sub ${AWS::StackName}-EFS-TomCatling

    TomCatlingInstanceProfileOutput:
      Description: InstanceProfile for user tom.catling
      Value: !Ref TomCatlingInstanceProfile
      Export:
        Name: !Sub ${AWS::StackName}-InstanceProfile-TomCatling